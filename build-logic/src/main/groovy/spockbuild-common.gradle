ext {
  baseVersion = "2.1"
  snapshotVersion = true
  milestone = 0
  variants = [2.5, 3.0]
  variant = System.getProperty("variant") as BigDecimal ?: variants.first()
  if (variant == 2.5) {
    groovyVersion = "2.5.14"
    minGroovyVersion = "2.5.0"
    maxGroovyVersion = "2.9.99"
  } else if (variant == 3.0) {
    groovyVersion = "3.0.8"
    minGroovyVersion = "3.0.0"
    maxGroovyVersion = "3.9.99"
  } else {
    throw new InvalidUserDataException("Unknown variant: $variant. Choose one of: $variants")
  }

  groovyDependencies = [
    [group: "org.codehaus.groovy", name: "groovy", version: groovyVersion]
  ]
  groovyConsoleExtraDependencies = [
    [group: "org.codehaus.groovy", name: "groovy-console", version: groovyVersion],
    [group: "org.codehaus.groovy", name: "groovy-test-junit5", version: groovyVersion], // for executing specs
    [group: "org.apache.ivy", name: "ivy", version: "2.5.0"] // for @Grab support
  ]
  maxGroovyVersion = snapshotVersion ? "9.9.99" : maxGroovyVersion
  if (System.getProperty("groovyVersion")) {
    groovyVersion = System.getProperty("groovyVersion")
  }
  fullVersion = baseVersion + ((!snapshotVersion && milestone) ? "-M$milestone" : "") + "-groovy-$variant" + (snapshotVersion ? "-SNAPSHOT" : '')
  variantLessVersion = baseVersion + (snapshotVersion ? "-SNAPSHOT" : (milestone ? "-M$milestone" : ""))
  javaVersions = [1.8, 11, 15] // ensure that latest version is actually build on travis, otherwise no docs get published
  javaVersion = System.getProperty("java.specification.version") as BigDecimal


  isRootProject = project == project.rootProject

  libs = [
    jetbrainsAnnotations: [group: "org.jetbrains", name: "annotations", version: "20.1.0"],
    asm                 : [group: 'org.ow2.asm', name: 'asm', version: '9.1'],
    bytebuddy           : [group: 'net.bytebuddy', name: 'byte-buddy', version: '1.11.0'],
    cglib               : [group: 'cglib', name: 'cglib-nodep', version: '3.3.0'],
    groovy              : groovyDependencies,
    groovySql           : [group: 'org.codehaus.groovy', name: 'groovy-sql', version: groovyVersion], //for some Spring and Unitils tests
    groovyTest          : [group: 'org.codehaus.groovy', name: 'groovy-test', version: groovyVersion], //for @NotYetImplemented
    groovyJmx           : [group: 'org.codehaus.groovy', name: 'groovy-jmx', version: groovyVersion],  //for triggering jacoco dump via jmx
    h2database          : [group: 'com.h2database', name: 'h2', version: '1.4.200'],
    hamcrest            : [group: 'org.hamcrest', name: 'hamcrest', version: '2.2'],
    jaxb                : [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'],
    junit4              : [group: 'junit', name: 'junit', version: '4.13.2'],
    junitBom            : [group: 'org.junit', name: 'junit-bom', version: '5.7.2'],
    jupiter             : [group: 'org.junit.jupiter', name: 'junit-jupiter'],
    junitPlatform       : [group: 'org.junit.platform', name: 'junit-platform-engine'],
    junitPlatformTestkit: [group: 'org.junit.platform', name: 'junit-platform-testkit'],
    junitPlatformConsole: [group: 'org.junit.platform', name: 'junit-platform-console'],
    log4j               : [group: 'log4j', name: 'log4j', version: '1.2.17'],
    objenesis           : [group: 'org.objenesis', name: 'objenesis', version: '3.2'],
    jacocoAgent         : [group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.6', classifier: 'runtime']
  ]
}

group = "org.spockframework"
version = fullVersion

if (javaVersion == 1.8) {
  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.noTimestamp()
  }
} else if (javaVersion >= 9){
  tasks.withType(JavaCompile) {
    sourceCompatibility = javaVersions.min()
    targetCompatibility = javaVersions.min()
    options.compilerArgs += ['--release', '8']
    options.encoding = 'UTF-8'
  }
  tasks.withType(GroovyCompile) {
    sourceCompatibility = javaVersions.min()
    targetCompatibility = javaVersions.min()
    options.compilerArgs += ['--release', '8']
    options.encoding = 'UTF-8'
  }

  tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.noTimestamp()
  }
}

// ignore mutable data that is irrelevant for compilation output
normalization {
  runtimeClasspath {
    metaInf {
      ignoreAttribute("Build-Revision")
    }
  }
}

repositories {
  mavenCentral()
}

